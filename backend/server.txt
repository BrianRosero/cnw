/*var server = app.listen(8083);
//Listen on socket
// Use Server constructor
var io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});
//Try to connect to database
const pool = new Pool({
  connectionString: connString
});
//Check if connection is good or bad
pool.connect(err => {
  if(err) {
    console.error('Database connection error', err.stack);
  }
  else {
    console.log('Connected');
  }
})
//io = to all clients
//socket = to specific client
io.on('connection', function(socket) {
  //Alerts us when someone successfully connects
  console.log('User Connected');
  //Alerts us when someone disconnects
  socket.on('disconnect', () => { // Corrected the event name to 'disconnect'
    console.log('User Disconnected')
  })

  //Update notes and let the clients know which row was updated
  socket.on("updateNotes", data => {
    pool.query('UPDATE public."Notes" SET notes = $1 WHERE id = $2;', [data.notes, data.id] ,(err ,res) => {
      if(err) throw err
      io.emit('dataIdUpdated', data.id);
    })
  })

  //Get everything from a table
  socket.on("getAllData", page => {
    //Base query
    var queryText = 'SELECT id, name, notes FROM public."Notes" ';

    //Position and values are for parameterization. Help with sql injection.
    //If you want to add filters, you can add them here and follow the pattern
    var position = 1;
    var values = [];

    //Filter by text
    if(page.filters.filterText.length > 0) {
      var fieldsToSearch = ["name", "notes"];
      if(!queryText.includes("WHERE")) queryText += "WHERE ";
      else queryText += "AND ";
      fieldsToSearch.forEach(element => { queryText += element + " ~* $" + position++ + " OR "; values.push(page.filters.filterText)});    //Adds the where statement and prepares the query to do case insensitive regex search
      queryText = queryText.slice(0, -3);     //Remove OR
      queryText += " "
    }

    queryText += 'ORDER BY id ASC ';

    //Offset and fetch next is needed when the database is huge.
    queryText += "OFFSET $" +position++ + " ROWS FETCH NEXT $" + position++ + " ROWS ONLY;";
    values.push(page.page.offset);
    values.push(page.page.limit);


    pool.query(queryText, values, (err ,res) => {
      if(err) throw err
      socket.emit("allData", res.rows);
    })
  })

  //Get the size of the table
  socket.on("getDataSize", () => {
    pool.query('SELECT COUNT(*) as count FROM public."Notes";', (err ,res) => {
      if(err) throw err
      socket.emit("tableSize", res.rows[0]);
    })
  })
})*/