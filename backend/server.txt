/*var server = app.listen(8083);
//Listen on socket
// Use Server constructor
var io = new Server(server, {
  cors: {
    origin: "*",
    methods: ["GET", "POST"]
  }
});
//Try to connect to database
const pool = new Pool({
  connectionString: connString
});
//Check if connection is good or bad
pool.connect(err => {
  if(err) {
    console.error('Database connection error', err.stack);
  }
  else {
    console.log('Connected');
  }
})
//io = to all clients
//socket = to specific client
io.on('connection', function(socket) {
  //Alerts us when someone successfully connects
  console.log('User Connected');
  //Alerts us when someone disconnects
  socket.on('disconnect', () => { // Corrected the event name to 'disconnect'
    console.log('User Disconnected')
  })

  //Update notes and let the clients know which row was updated
  socket.on("updateNotes", data => {
    pool.query('UPDATE public."Notes" SET notes = $1 WHERE id = $2;', [data.notes, data.id] ,(err ,res) => {
      if(err) throw err
      io.emit('dataIdUpdated', data.id);
    })
  })

  //Get everything from a table
  socket.on("getAllData", page => {
    //Base query
    var queryText = 'SELECT id, name, notes FROM public."Notes" ';

    //Position and values are for parameterization. Help with sql injection.
    //If you want to add filters, you can add them here and follow the pattern
    var position = 1;
    var values = [];

    //Filter by text
    if(page.filters.filterText.length > 0) {
      var fieldsToSearch = ["name", "notes"];
      if(!queryText.includes("WHERE")) queryText += "WHERE ";
      else queryText += "AND ";
      fieldsToSearch.forEach(element => { queryText += element + " ~* $" + position++ + " OR "; values.push(page.filters.filterText)});    //Adds the where statement and prepares the query to do case insensitive regex search
      queryText = queryText.slice(0, -3);     //Remove OR
      queryText += " "
    }

    queryText += 'ORDER BY id ASC ';

    //Offset and fetch next is needed when the database is huge.
    queryText += "OFFSET $" +position++ + " ROWS FETCH NEXT $" + position++ + " ROWS ONLY;";
    values.push(page.page.offset);
    values.push(page.page.limit);


    pool.query(queryText, values, (err ,res) => {
      if(err) throw err
      socket.emit("allData", res.rows);
    })
  })

  //Get the size of the table
  socket.on("getDataSize", () => {
    pool.query('SELECT COUNT(*) as count FROM public."Notes";', (err ,res) => {
      if(err) throw err
      socket.emit("tableSize", res.rows[0]);
    })
  })
})*/

/*app.get('/prtg-api', async (req, res) => {
  try {
    const response = await axios.get('http://192.168.200.158:80/api/table.json', {
      params: {
        content: 'sensors',
        output: 'json',
        columns: 'objid,probe,group,device,sensor,status,message,lastvalue,priority,favorite,deviceid,device_type,device_manufacturer,device_uptime',
        username: 'prtgadmin',
        password: 'prtgadmin',
      },
      httpsAgent
    });
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching data from PRTG API:', error.message);
    res.status(500).json({ error: 'Failed to fetch data from PRTG API' });
  }
});*/

/*app.get('/prtg-api/CAMARACC', async (req, res) => {
  try {
    const response = await axios.get('http://192.168.200.158:80/api/table.json', {
      params: {
        content: 'sensors',
        output: 'json',
        columns: 'objid,probe,group,device,sensor,status,message,lastvalue,priority,favorite,deviceid,device_type,device_manufacturer,device_uptime',
        username: 'prtgadmin',
        password: 'prtgadmin',
        filter_objid: [1001] // Filtrar por los IDs de los sensores
      },
      paramsSerializer: params => {
        // Serializa los parámetros para incluir múltiples filter_objid
        return Object.entries(params)
          .map(([key, value]) => {
            if (Array.isArray(value)) {
              return value.map(val => `${key}=${val}`).join('&');
            }
            return `${key}=${value}`;
          })
          .join('&');
      },
      httpsAgent
    });
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching data from PRTG API:', error.message);
    res.status(500).json({ error: 'Failed to fetch data from PRTG API' });
  }
});*/

/*app.get('/prtg-api/CAMARACC/maquina', async (req, res) => {
  try {
    const response = await axios.get('http://192.168.200.158/api/table.json', {
      params: {
        content: 'channels',
        columns: 'objid,channel,name,lastvalue,lastvalue_raw,lastvalue_diff,min,max,avg',
        count: 50,
        id: 1001,
        username: 'prtgadmin',
        password: 'prtgadmin'
      },
      paramsSerializer: params => {
        return Object.entries(params)
          .map(([key, value]) => `${key}=${value}`)
          .join('&');
      },
      httpsAgent // Agregar el agente HTTPS
    });
    res.json(response.data);
  } catch (error) {
    console.error('Error fetching data from PRTG API:', error.message);
    res.status(500).json({ error: 'Failed to fetch data from PRTG API' });
  }
});*/

/*require('dotenv').config();
const express = require("express");
const bodyParser = require('body-parser');
const cors = require("cors");
const axios = require("axios");
const https = require('https');
const app = express();
const sqlite3 = require('sqlite3').verbose();
const cron = require('node-cron');

// Configurar CORS para permitir cualquier origen
app.use(cors());

app.use(bodyParser.json());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Conectar a la base de datos SQLite
const dbs = new sqlite3.Database('graficas.db');

// Crear la tabla si no existe
dbs.run(`
  CREATE TABLE IF NOT EXISTS history_data (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    sensor_id INTEGER,
    cpu_usage REAL,
    disk_usage REAL,
    memory_usage REAL,
    timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
  )
`);

// Configurar agente HTTPS para aceptar certificados autofirmados
const httpsAgent = new https.Agent({
  rejectUnauthorized: false,
});

// database
const db = require("./app/models");
const Role = db.role;

// db.sequelize.sync();
// force: true will drop the table if it already exists
db.sequelize.sync().then(() => {
  console.log('Base de datos sincronizada');
  initial();
});

// Función para obtener y guardar datos de sensores
const fetchAndSaveSensorData = async (sensorId) => {
  try {
    const response = await axios.get(`http://192.168.200.158/api/table.json`, {
      params: {
        content: 'channels',
        columns: 'objid,channel,name,lastvalue',
        id: sensorId,
        username: 'prtgadmin',
        password: 'prtgadmin'
      },
      paramsSerializer: params => {
        return Object.entries(params)
          .map(([key, value]) => `${key}=${value}`)
          .join('&');
      },
      httpsAgent
    });

    const channelData = response.data.channels.reduce((acc, channel) => {
      acc[channel.objid] = channel;
      return acc;
    }, {});

    const cpuUsage = parseFloat(channelData[2099]?.lastvalue) || 0; // Ajusta el objid según tu sensor
    const diskUsage = parseFloat(channelData[2098]?.lastvalue) || 0; // Ajusta el objid según tu sensor
    const memoryUsage = parseFloat(channelData[2126]?.lastvalue) || 0; // Ajusta el objid según tu sensor

    dbs.run(
      `INSERT INTO history_data (sensor_id, cpu_usage, disk_usage, memory_usage)
       VALUES (?, ?, ?, ?)`,
      [sensorId, cpuUsage, diskUsage, memoryUsage],
      function(err) {
        if (err) {
          console.error('Error al guardar los datos:', err.message);
        } else {
          console.log(`Datos guardados para sensor ${sensorId}:`, { cpuUsage, diskUsage, memoryUsage });
        }
      }
    );

  } catch (error) {
    console.error(`Error fetching data for sensor ${sensorId}:`, error.message);
  }
};

// Tarea programada para guardar datos de sensores cada 1 minuto
cron.schedule('* * * * *', () => {
  const sensors = [2099, 2098, 2126]; // Lista de IDs de sensores a monitorear
  sensors.forEach(sensorId => fetchAndSaveSensorData(sensorId));
});

// simple route
app.get("/", (req, res) => {
  res.json({ message: "Bienvenido esta es la aplicación CONSULNETWORKS." });
});

app.post('/saveData', (req, res) => {
  const { sensorId, cpuUsage, diskUsage, memoryUsage } = req.body;
  dbs.run(
    `INSERT INTO history_data (sensor_id, cpu_usage, disk_usage, memory_usage)
     VALUES (?, ?, ?, ?)`,
    [sensorId, cpuUsage, diskUsage, memoryUsage],
    function(err) {
      if (err) {
        return res.status(500).send(err.message);
      }
      res.status(200).send({ id: this.lastID });
    }
  );
});

app.get('/getData', (req, res) => {
  const { sensorId, startTime, endTime } = req.query;
  dbs.all(
    `SELECT * FROM history_data WHERE sensor_id = ? AND timestamp BETWEEN ? AND ? ORDER BY timestamp ASC`,
    [sensorId, startTime, endTime],
    (err, rows) => {
      if (err) {
        return res.status(500).send(err.message);
      }
      res.status(200).send(rows);
    }
  );
});

app.get('/prtg-api/:sensorId', async (req, res) => {
  const sensorId = req.params.sensorId;

  try {
    const response = await axios.get('http://192.168.200.158/api/table.json', {
      params: {
        content: 'channels',
        columns: 'objid,channel,name,lastvalue',
        id: sensorId,
        username: 'prtgadmin',
        password: 'prtgadmin'
      },
      paramsSerializer: params => {
        return Object.entries(params)
          .map(([key, value]) => `${key}=${value}`)
          .join('&');
      },
      httpsAgent
    });

    const channelData = response.data.channels || [];
    res.json({ channels: channelData });
  } catch (error) {
    console.error('Error fetching data from PRTG API:', error.message);
    res.status(500).json({ error: 'Failed to fetch data from PRTG API' });
  }
});

// routes
require('./app/routes/auth.routes')(app);
require('./app/routes/user.routes')(app);

// set port, listen for requests
const PORT = process.env.PORT || 8083;
app.listen(PORT, () => {
  console.log(`El Servidor se está ejecutando en el puerto ${PORT}.`);
});

function initial() {
  // Verificar si los roles ya existen en la base de datos
  Role.findAll()
    .then(roles => {
      if (roles.length === 0) {
        // Si no hay roles, crear los roles
        Role.create({
          id: 1,
          name: "usuario"
        });

        Role.create({
          id: 2,
          name: "moderador"
        });

        Role.create({
          id: 3,
          name: "administrador"
        });
        Role.create({
          id: 4,
          name: "administrador-ESECENTRO"
        });
        Role.create({
          id: 5,
          name: "administrador-CAMARA-Y-COMERCIO"
        });
        Role.create({
          id: 6,
          name: "administrador-COSMITET"
        });
        Role.create({
          id: 7,
          name: "administrador-DUANA"
        });
        Role.create({
          id: 8,
          name: "administrador-OZONO"
        });
        Role.create({
          id: 9,
          name: "administrador-ROCHE"
        });
      } else {
        console.log('No se han creado algunos roles porque ya existen');
      }
    })
    .catch(err => {
      console.error('Error al revisar los roles:', err);
    });
}*/


// Ruta para obtener los detalles completos de las VMs
/*app.get('/vms', async (req, res) => {
  try {
    const sessionId = await getSessionId();

    // Obtener información básica de todas las VMs
    const vmsResponse = await axios.get(`${vcenterUrl}/rest/vcenter/vm`, {
      headers: {
        'vmware-api-session-id': sessionId,
      },
      httpsAgent,
    });

    // Obtener detalles adicionales de cada VM
    const vmDetailsPromises = vmsResponse.data.value.map(async (vm) => {
      const hardwareDetails = await getVmHardwareDetails(vm.vm, sessionId);
      const networkDetails = await getVmNetworkDetails(vm.vm, sessionId);
      const storageDetails = await getVmStorageDetails(vm.vm, sessionId);
      const snapshots = await getVmSnapshots(vm.vm, sessionId);
      const vmDetails = await getVmDetails(vm.vm, sessionId);

      return {
        ...vm,
        hardware: hardwareDetails,
        network: networkDetails,
        storage: storageDetails,
        snapshots: snapshots,
        vmDetails: vmDetails,
      };
    });

    const detailedVms = await Promise.all(vmDetailsPromises);

    res.json(detailedVms);
    console.log('Lista de VMs obtenida con detalles completos');
  } catch (error) {
    console.error('Error fetching VMs:', error.message);
    res.status(500).send('Error fetching VMs');
  }
});*/

/*// Ruta para resetear una VM
app.post('/vms/:vmId/reset', async (req, res) => {
  try {
    const sessionId = await getSessionId();
    const { vmId } = req.params;
    await axios.post(`${vcenterUrl}/rest/vcenter/vm/${vmId}/power/reset`, {}, {
      headers: {
        'vmware-api-session-id': sessionId
      },
      httpsAgent: httpsAgent
    });
    res.send('VM reset successfully');
    logEvent(`VM ${vmId} reiniciada`);
  } catch (error) {
    console.error('Error resetting VM:', error.message);
    logEvent(`Error al reiniciar la VM ${vmId}: ${error.message}`);
    res.status(500).send('Error resetting VM');
  }
});

// Ruta para apagar el sistema operativo invitado de una VM
app.post('/vms/:vmId/shutdown-guest', async (req, res) => {
  try {
    const sessionId = await getSessionId();
    const { vmId } = req.params;
    await axios.post(`${vcenterUrl}/rest/vcenter/vm/${vmId}/guest/power/stop`, {}, {
      headers: {
        'vmware-api-session-id': sessionId
      },
      httpsAgent: httpsAgent
    });
    res.send('VM guest OS shut down successfully');
  } catch (error) {
    console.error('Error shutting down guest OS:', error.message);
    res.status(500).send('Error shutting down guest OS');
  }
});

// Ruta para reiniciar el sistema operativo invitado de una VM
app.post('/vms/:vmId/restart-guest', async (req, res) => {
try {
  const sessionId = await getSessionId();
  const { vmId } = req.params;
  await axios.post(`${vcenterUrl}/rest/vcenter/vm/${vmId}/guest/power/reboot`, {}, {
    headers: {
      'vmware-api-session-id': sessionId
    },
    httpsAgent: httpsAgent
  });
  res.send('VM guest OS restarted successfully');
} catch (error) {
  console.error('Error restarting guest OS:', error.message);
  res.status(500).send('Error restarting guest OS');
}
});*/

// Similarmente, puedes agregar endpoints para suspender, hibernar y reiniciar
